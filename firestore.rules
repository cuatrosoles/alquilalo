rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Función auxiliar para verificar si el usuario está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }

    // Función auxiliar para verificar si el usuario es el propietario
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Función auxiliar para verificar si el usuario es parte de un alquiler
    function isRentalParticipant(rental) {
      return isAuthenticated() && 
        (request.auth.uid == rental.userId || request.auth.uid == rental.ownerId);
    }

    // Reglas para la colección de usuarios
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }

    // Reglas para la colección de alquileres
    match /rentals/{rentalId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         resource.data.ownerId == request.auth.uid);
      allow delete: if false;
    }

    // Reglas para la colección de items
    match /items/{itemId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         (request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['availability.blockedDates'])));
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Reglas para la colección de categorías
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if false;
    }

    // Reglas para la colección de mensajes
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
        (resource.data.senderId == request.auth.uid || 
         resource.data.receiverId == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid;
      allow update: if isAuthenticated() && 
        (resource.data.senderId == request.auth.uid || 
         resource.data.receiverId == request.auth.uid);
      allow delete: if false;
    }
  }
} 